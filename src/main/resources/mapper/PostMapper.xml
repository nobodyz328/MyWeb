<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.myweb.website_core.mapper.PostMapper">

    <!-- 结果映射 -->
    <resultMap id="PostResultMap" type="com.myweb.website_core.demos.web.blog.Post">
        <id column="id" property="id" jdbcType="BIGINT"/>
        <result column="title" property="title" jdbcType="VARCHAR"/>
        <result column="content" property="content" jdbcType="VARCHAR"/>
        <result column="created_at" property="createdAt" jdbcType="TIMESTAMP"/>
        <result column="like_count" property="likeCount" jdbcType="INTEGER"/>
        <result column="collect_count" property="collectCount" jdbcType="INTEGER"/>
        <result column="comment_count" property="commentCount" jdbcType="INTEGER"/>
        <result column="images" property="images" jdbcType="VARCHAR"/>
        <!-- 关联用户信息 -->
        <association property="author" javaType="com.myweb.website_core.demos.web.user.User">
            <id column="author_id" property="id" jdbcType="BIGINT"/>
            <result column="author_username" property="username" jdbcType="VARCHAR"/>
            <result column="author_avatar_url" property="avatarUrl" jdbcType="VARCHAR"/>
        </association>
    </resultMap>
    <!-- 基础字段 -->
    <sql id="Base_Column_List">
        id, title, content, created_at, like_count, collect_count, comment_count, images,
    author_id, author_username, author_avatar_url
    </sql>

    <select id="selectPostById" resultMap="PostResultMap">
        SELECT
            p.id,
            p.title,
            p.content,
            p.created_at,
            p.like_count,
            p.collect_count,
            p.comment_count,
            p.images,
            u.id AS author_id,
            u.username AS author_username,
            u.avatar_url AS author_avatar_url
        FROM posts p
                 LEFT JOIN users u ON p.author_id = u.id
        WHERE p.id = #{id}
    </select>

    <!-- 插入帖子 -->
    <insert id="insertPost" parameterType="com.myweb.website_core.demos.web.blog.Post" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO posts (title, content, author_id, created_at, like_count, collect_count, comment_count, images)
        VALUES (#{title}, #{content}, #{author.id}, #{createdAt}, #{likeCount}, #{collectCount}, #{commentCount}, #{images})
    </insert>

    <!-- 根据ID查询帖子 -->
    <select id="selectPostById" resultMap="PostResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM posts p
        LEFT JOIN users u ON p.author_id = u.id
        WHERE p.id = #{id}
    </select>

    <!-- 查询所有帖子 -->
    <select id="selectAllPosts" resultMap="PostResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM posts p
        LEFT JOIN users u ON p.author_id = u.id
        ORDER BY p.created_at DESC
    </select>

    <!-- 根据用户ID查询帖子 -->
    <select id="selectPostsByUserId" resultMap="PostResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM posts p
        LEFT JOIN users u ON p.author_id = u.id
        WHERE p.author_id = #{userId}
        ORDER BY p.created_at DESC
    </select>

    <!-- 更新帖子 -->
    <update id="updatePost" parameterType="com.myweb.website_core.demos.web.blog.Post">
        UPDATE posts
        SET title = #{title},
            content = #{content},
            images = #{images}
        WHERE id = #{id}
    </update>

    <!-- 删除帖子 -->
    <delete id="deletePost">
        DELETE FROM posts WHERE id = #{id}
    </delete>

    <!-- 搜索帖子 -->
    <select id="searchPosts" resultMap="PostResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM posts p
        LEFT JOIN users u ON p.author_id = u.id
        WHERE p.title LIKE CONCAT('%', #{keyword}, '%')
           OR p.content LIKE CONCAT('%', #{keyword}, '%')
           OR u.username LIKE CONCAT('%', #{keyword}, '%')
        ORDER BY p.created_at DESC
    </select>

    <!-- 获取点赞数前N的帖子 -->
    <select id="selectTopLikedPosts" resultMap="PostResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM posts p
        LEFT JOIN users u ON p.author_id = u.id
        ORDER BY p.like_count DESC, p.created_at DESC
        LIMIT #{limit}
    </select>

    <!-- 更新帖子点赞数 -->
    <update id="updateLikeCount">
        UPDATE posts SET like_count = #{likeCount} WHERE id = #{id}
    </update>

    <!-- 更新帖子收藏数 -->
    <update id="updateCollectCount">
        UPDATE posts SET collect_count = #{collectCount} WHERE id = #{id}
    </update>

</mapper>